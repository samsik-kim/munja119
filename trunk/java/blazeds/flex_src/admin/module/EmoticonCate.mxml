<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="creationCompleteHandler()"  width="800" height="370" xmlns:emoticon="admin.component.emoticon.*">
	<fx:Script>
		<![CDATA[
			import lib.RO;
			import lib.SLibrary;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var currGubun:String = "테마문자";
			private var currCate:String = "";
			private var currPage:int = 0;
			
			private var ro:RO = new RO();
			private var RO_DESTINATION:String = "ADMIN";
			
			private var currAC:ArrayCollection = null;
			
			private var one_one:ArrayCollection = new ArrayCollection(["감사","계절","공지/안내","기념","날씨","명언/감동","모임","부고/조의","사과/화해","사랑/고백"]);
			private var one_two:ArrayCollection = new ArrayCollection(["시즌","안부","약속","요일","우정","위로/격려","유머/패러디","종교","초대","축하"]);
			private var one_three:ArrayCollection = new ArrayCollection(["홍보/행사","기타"]);
			
			private var one:ArrayCollection = new ArrayCollection([one_one,one_two,one_three]);
			
			
			private var two_one:ArrayCollection = new ArrayCollection(["가구/인테리어","가전","건강/다이어트","결혼정보","금융","꽃배달","나이트","낚시","노래방"]);
			private var two_two:ArrayCollection = new ArrayCollection(["대리운전","대출","동물병원","레저/스포츠","렌터카","미용실","병원","보험","부동산"]);
			private var two_three:ArrayCollection = new ArrayCollection(["쇼핑몰/오픈마켓","스포츠","식품/슈퍼마켓","여행사","옷/의류","유치원/어린이집","유흥"]);
			private var two_four:ArrayCollection = new ArrayCollection(["음식","이삿짐","자동차","조합/노조","종교","카센터","택배/쿽서비스","통신","학원/학교"]);
			private var two:ArrayCollection = new ArrayCollection([two_one,two_two,two_three,two_four]);
			
			
			
			
			private var three:ArrayCollection = new ArrayCollection();
			
			protected function creationCompleteHandler():void
			{
				currAC = one;
				
				init_cate();
				
				emtTab.selectedIndex = 0;
				
				ro.set(RO_DESTINATION, unit_ResultEventHandler);
				ro.method.getEmotiAdminHm(currGubun, currCate, currPage);
			}
			
			private function unit_ResultEventHandler(event:ResultEvent):void {
				
				var arr:ArrayCollection = event.result as ArrayCollection;
				this.mgEmoti.arrMessage = arr;
			}
			
			protected function pre_clickHandler(event:MouseEvent):void
			{
				var idx:int = currAC.getItemIndex( category.dataProvider );
				if (idx > 0) {
					category.dataProvider = currAC.getItemAt(idx -1) as ArrayCollection;
					nextBtn.enabled = true;
					if (idx -1 == 0) preBtn.enabled = false;
				} else {
					preBtn.enabled = false;
				}
				
			}
			
			protected function next_clickHandler(event:MouseEvent):void
			{
				var idx:int = currAC.getItemIndex( category.dataProvider );
				if (idx < currAC.length - 1) {
					category.dataProvider = currAC.getItemAt(idx +1) as ArrayCollection;
					preBtn.enabled = true;
					
					if (idx +1 == currAC.length - 1) nextBtn.enabled = false;
				} else {
					nextBtn.enabled = false;
				}
			}
			
			protected function emti_changeHandler(event:IndexChangeEvent):void
			{
				category.visible = true;
				preBtn.visible = true;
				nextBtn.visible = true;
				
				if (emtTab.selectedIndex == 0) {currAC = one;currGubun = "테마문자";}
				else if (emtTab.selectedIndex == 1) {currAC = two;currGubun = "업종별문자";}
				else if (emtTab.selectedIndex == 2) {
					category.visible = false;
					preBtn.visible = false;
					nextBtn.visible = false;
					currGubun = "등록문자";
				}
				currCate = "";
				currPage = 0;
				init_cate();
				
				ro.set(RO_DESTINATION, unit_ResultEventHandler);
				ro.method.getEmotiAdminHm(currGubun, currCate, currPage);
			}
			
			private function init_cate():void {
				category.dataProvider = currAC.getItemAt(0) as ArrayCollection;
				preBtn.enabled = false;
				if (currAC.length == 1)nextBtn.enabled = false;
				else nextBtn.enabled = true;
			}
			
			protected function category_changeHandler(event:IndexChangeEvent):void
			{
				currPage = 0;
				var ac:ArrayCollection = category.dataProvider as ArrayCollection;
				if ( category.selectedIndex >= 0) 
					currCate = ac.getItemAt( category.selectedIndex ) as String;
				else
					currCate = "";
				
				ro.set(RO_DESTINATION, unit_ResultEventHandler);
				ro.method.getEmotiAdminHm(currGubun, currCate, currPage);
			}
			
			public function getMessage(gubun:String, cate:String, page:int):void {
				
				currGubun = gubun;
				currCate = cate;
				currPage = page;
				
				ro.set(RO_DESTINATION, unit_ResultEventHandler);
				ro.method.getEmotiAdminHm(currGubun, currCate, currPage);
			}
			
			private function prePage():void { if (currPage > 1)currPage--; }
			private function nextPage():void { currPage++;	}
			
			
			[Bindable]public var gubun:ArrayCollection = new ArrayCollection(
				[ {label:"테마문자", data:"테마문자"}, 
					{label:"업종별문자", data:"업종별문자"},
					{label:"등록문자", data:"등록문자"} ]);
			
			[Bindable]public var theme:ArrayCollection = new ArrayCollection(
				[ 
					{label:"감사", data:"감사"},
					{label:"계절", data:"계절"},
					{label:"공지/안내", data:"공지/안내"},
					{label:"기념", data:"기념"},
					{label:"날씨", data:"날씨"},
					{label:"명언/감동", data:"명언/감동"},
					{label:"모임", data:"모임"},
					{label:"부고/조의", data:"부고/조의"},
					{label:"사과/화해", data:"사과/화해"},
					{label:"사랑/고백", data:"사랑/고백"},
					{label:"시즌", data:"시즌"},
					{label:"안부", data:"안부"},
					{label:"약속", data:"약속"},
					{label:"요일", data:"요일"},
					{label:"우정", data:"우정"},
					{label:"위로/격려", data:"위로/격려"},
					{label:"유머/패러디", data:"유머/패러디"},
					{label:"종교", data:"종교"},
					{label:"초대", data:"초대"},
					{label:"축하", data:"축하"},
					{label:"홍보/행사", data:"홍보/행사"},
					{label:"기타", data:"기타"} ]);
			
			[Bindable]public var upjong:ArrayCollection = new ArrayCollection(
				[ 
					{label:"가구/인테리어", data:"가구/인테리어"},
					{label:"가전", data:"가전"},
					{label:"건강/다이어트", data:"건강/다이어트"},
					{label:"결혼정보", data:"결혼정보"},
					{label:"금융", data:"금융"},
					{label:"꽃배달", data:"꽃배달"},
					{label:"나이트", data:"나이트"},
					{label:"낚시", data:"낚시"},
					{label:"노래방", data:"노래방"},
					{label:"대리운전", data:"대리운전"},
					{label:"대출", data:"대출"},
					{label:"동물병원", data:"동물병원"},
					{label:"레저/스포츠", data:"레저/스포츠"},
					{label:"렌터카", data:"렌터카"},
					{label:"미용실", data:"미용실"},
					{label:"병원", data:"병원"},
					{label:"보험", data:"보험"},
					{label:"부동산", data:"부동산"},
					{label:"쇼핑몰/오픈마켓", data:"쇼핑몰/오픈마켓"},
					{label:"스포츠", data:"스포츠"},
					{label:"식품/슈퍼마켓", data:"식품/슈퍼마켓"},
					{label:"여행사", data:"여행사"},
					{label:"옷/의류", data:"옷/의류"},
					{label:"유치원/어린이집", data:"유치원/어린이집"},
					{label:"유흥", data:"유흥"},
					{label:"음식", data:"음식"},
					{label:"이삿짐", data:"이삿짐"},
					{label:"자동차", data:"자동차"},
					{label:"조합/노조", data:"조합/노조"},
					{label:"종교", data:"종교"},
					{label:"카센터", data:"카센터"},
					{label:"택배/쿽서비스", data:"택배/쿽서비스"},
					{label:"통신", data:"통신"},
					{label:"학원/학교", data:"학원/학교"}
					 ]);
			
			public function modify(idx:int,gubun:String, cate:String, msg:String):void {
				
				ro.set(RO_DESTINATION, modify_ResultEventHandler);
				ro.method.updateEmotiCate(idx,gubun, cate, msg);
			}
			
			private function modify_ResultEventHandler(event:ResultEvent):void {
				
				SLibrary.alert("수정되었습니다." );
				getMessage(currGubun, currCate, currPage);
			}
			
			public function deleteEmt(idx:int):void {
				
				ro.set(RO_DESTINATION, delete_ResultEventHandler);
				ro.method.deleteEmoti(idx);
			}
			
			private function delete_ResultEventHandler(event:ResultEvent):void {
				
				SLibrary.alert("삭제되었습니다." );
				getMessage(currGubun, currCate, currPage);
			}
			
			protected function add_clickHandler(event:MouseEvent):void
			{
				ro.set(RO_DESTINATION, add_ResultEventHandler);
				
				ro.method.addEmotiCate(cbGubun.selectedItem.data, cbCate.selectedItem.data, inputEmt.text);
				
			}
			
			private function add_ResultEventHandler(event:ResultEvent):void {
				
				SLibrary.alert("저장되었습니다." );
				currGubun = cbGubun.selectedItem.data;
				currCate = cbCate.selectedItem.data;
				currPage = 0;
				
				getMessage(currGubun, currCate, currPage);
			}
			
			protected function cbGubun_changeHandler(event:IndexChangeEvent):void
			{
				var gb:int =  cbGubun.selectedIndex;
				
				if (gb == 0) cbCate.dataProvider = theme;
				else if (gb == 1) cbCate.dataProvider = upjong;
				else cbCate.dataProvider = null;
				
				
			}
			
			
			private var _currentByte:int = 0;
			private var _maxByte:int = 80;
			
			public function get currentByte():int {	return _currentByte; }
			public function set currentByte(value:int):void	{ _currentByte = value; this.IByteLabel.text = String( value );	}
			
			public function get maxByte():int { return _maxByte; }
			public function set maxByte(value:int):void	{ _maxByte = value; }
			
			public function getMessaget():String{ return inputEmt.text; }
			
			public function bLimitMessage():Boolean { return this.currentByte < 0; }
			
			public function cutLimitMessage():String{ return SLibrary.cutByteTo(inputEmt.text, 80); }
			
			public function setMessage(message:String):void{ 
				
				this.inputEmt.text = message;
				IMessage_ByteCheck();
			}
			
			public function IMessage_ByteCheck():void {
				
				this.currentByte = SLibrary.remainByte(SLibrary.getByte(this.getMessaget()),this.maxByte);
			}
			
			
			
			protected function IMessage_keyUpHandler(event:KeyboardEvent):void
			{
				IMessage_ByteCheck();
				if (bLimitMessage()) {
					setMessage(cutLimitMessage());
					ExternalInterface.call( "alert", String(80)+" byte 이상 메시지가 삭제 되었습니다.");
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup width="100%" height="100%">
		<s:VGroup>
			<s:Group width="142" height="100" >
				<s:TextArea id="inputEmt" left="5" right="5" top="5" bottom="5" height="100" keyUp="IMessage_keyUpHandler(event)" />
			</s:Group>
			<s:Label id="IByteLabel" right="0" text="80" width="14" textAlign="right" fontSize="12" verticalCenter="0"/>	
			<s:ComboBox id="cbGubun" prompt="구분 선택" dataProvider="{gubun}" change="cbGubun_changeHandler(event)"/>
			<s:ComboBox id="cbCate" prompt="카테고리 선택"/>
			<s:Button label="추가" click="add_clickHandler(event)"/>
		</s:VGroup>
		
		<s:Group>
			<s:layout>
				<s:VerticalLayout gap="0"/>
			</s:layout>
			<s:VGroup gap="10">
				<s:ButtonBar id="emtTab" skinClass="skin.EmotiButtonBar" change="emti_changeHandler(event)" color="0xffffff" fontWeight="bold">
					<s:ArrayCollection> 
						<fx:String>테마문자</fx:String> 
						<fx:String>업종별문자</fx:String> 
						<fx:String>등록문자</fx:String> 
					</s:ArrayCollection> 
				</s:ButtonBar>	
			</s:VGroup>
			
			<s:Group width="100%" height="100%">
				<s:VGroup top="11" left="0" right="0" horizontalAlign="center">
					<s:HGroup gap="2">
						<s:Group id="preBtn" buttonMode="true" useHandCursor="true" click="pre_clickHandler(event)">
							<s:BitmapImage source="@Embed(source='assets/left_emt.png')" left="0"/>
						</s:Group>
						<s:ButtonBar id="category" fontSize="11" change="category_changeHandler(event)" />
						<s:Group id="nextBtn" buttonMode="true" useHandCursor="true" click="next_clickHandler(event)">
							<s:BitmapImage source="@Embed(source='assets/right_emt.png')" left="0"/>
						</s:Group>
					</s:HGroup>
					<s:HGroup left="10" right="10" fontSize="12" gap="5" horizontalAlign="center" paddingTop="10" verticalAlign="middle">
						
						<s:Group width="20" height="31"  buttonMode="true" useHandCursor="true" click="{prePage();ro.method.getEmotiAdminHm(currGubun, currCate, currPage);}">
							<s:BitmapImage left="3" source="@Embed(source='assets/pre_emt.png')"/>	
						</s:Group>
						
						<emoticon:MessageCateGroup width="100%" height="100%" id="mgEmoti" />
						
						
						<s:Group width="20" height="31" buttonMode="true" useHandCursor="true"  click="{nextPage();ro.method.getEmotiAdminHm(currGubun, currCate, currPage);}">
							<s:BitmapImage left="3" source="@Embed(source='assets/next_emt.png')"/>	
						</s:Group>
					</s:HGroup>
				</s:VGroup>
			</s:Group>
			
		</s:Group>
		
	</s:HGroup>
</s:Module>
