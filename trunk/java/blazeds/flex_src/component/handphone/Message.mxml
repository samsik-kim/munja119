<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  creationComplete="vgroup1_creationCompleteHandler(event)" horizontalAlign="center" gap="2">
	<fx:Metadata>
		[Event(name="alert", type="lib.CustomEvent")]
		[Event(name="validValue", type="lib.CustomEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import lib.CustomEvent;
			import lib.SLibrary;
			
			import mx.events.FlexEvent;
			
			private var _message:String;
			private var _maxByte:int = 80;
			private var _currentByte:int = 0;
			
			[Bindable]private var _enable:Boolean = true;
			
			private var byteDisplayHeight:int = 22;
			
			public function get currentByte():int {	return _currentByte; }
			public function set currentByte(value:int):void	{ _currentByte = value; this.IByteLabel.text = String( value );	}
			
			public function get maxByte():int { return _maxByte; }
			public function set maxByte(value:int):void	{ _maxByte = value; }
			
			
			public function cutLimitByte():String { return SLibrary.cutByteTo(this._message , this._maxByte ); }			
			
			/* style */
			public function get enable():Boolean { return _enable; }			
			public function set enable(value:Boolean):void { _enable = value; }
			
			
			/**
			 * MaxBytes를 세팅 해줍니다.
			 */
			public function setMaxByteFields(maxByteSetting:Number):void {	IByteLabel.text = String(maxByteSetting); }
			
			public function getMessage():String{ return IMessage.text; }
			
			public function setMessage(message:String):void{ 

				IMessage.text = message;
				IMessage_ByteCheck();
			}
			
			public function setMessageAdd(message:String):void{
				
				IMessage.text += message;
				IMessage_ByteCheck();
			}
			
			public function getLimitMessageByte():Number{ return _maxByte; } 
			
			/**
			 * 리미트 메시지 바이트를 세팅합니다.
			 */
			public function setLimitMessageByte(num:Number):void{
				
				_maxByte = num;
				setMaxByteFields(num);
			}
			
			/**
			 * 리미트 바이트를 넘었는지 여부에 대해 반환 합니다.
			 */
			public function bLimitMessage():Boolean { return this.currentByte < 0; }
			
			
			/**
			 * limitMessageByte로 message를 자른 후 반환
			 *
			 */
			public function cutLimitMessage():String{ return SLibrary.cutByteTo(IMessage.text, _maxByte); }
			
			public function IMessage_ByteCheck():void {
				
				this.currentByte = SLibrary.remainByte( SLibrary.getByte(this.getMessage()),this.maxByte);
			}
			
			public function IMessage_ByteCheckAddSelected(addByte:int):void {
				
				this.currentByte = SLibrary.remainByte( SLibrary.getByte(this.getMessage())+ addByte,this.maxByte);
			}


			protected function IMessage_keyUpHandler(event:KeyboardEvent):void
			{
				IMessage_ByteCheck();
				if (bLimitMessage()) {
					setMessage(cutLimitMessage());
					dispatchEvent(new CustomEvent("alert", String(this.maxByte)+" byte 이상 메시지가 삭제 되었습니다."));
				} else {
					dispatchEvent(new CustomEvent("validValue", null));
				}
			}


			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				this._currentByte = 0;
			}

			protected function clickHandler(event:Event):void
			{
				parentApplication.loadEmoticon();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:TextArea id="IMessage" height="115" width="100%" verticalScrollPolicy="off" enabled="{_enable}" color="0x000000" keyUp="IMessage_keyUpHandler(event)"></s:TextArea>
	<s:Group width="100%">
		<s:Group left="0" buttonMode="true" useHandCursor="true" click="clickHandler(event)" verticalCenter="0">
			<s:BitmapImage source="@Embed('/assets/emoticon_button.png')" />
		</s:Group>
		<!--
		<s:Group buttonMode="true" useHandCursor="true">
			<s:BitmapImage source="@Embed('/assets/spec_button.png')" />
		</s:Group>
		-->
		<s:Label id="IByteLabel" right="0" text="80" width="14" textAlign="right" color="0xffffff" fontSize="11" verticalCenter="0"/>	
	</s:Group>
	
</s:VGroup>
