<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" layout="absolute" xmlns:component="component.*" backgroundAlpha="1"
		   creationComplete="creationCompleteHandler(event)" xmlns:handphone="component.handphone.*" xmlns:lib="lib.*">
	<fx:Style source="flex.css"/>
	<fx:Script>
		<![CDATA[
			import lib.BooleanAndDescriptionVO;
			import lib.CustomEvent;
			import lib.SLibrary;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			/*###############################
			#	variable & Attribute		#
			###############################*/
			private var ro:RemoteObject = null;
			private var RO_DESTINATION:String = "WEB";
			private var ro_sub:RemoteObject = null;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				sendButton.enabled = false;
				isValid();
			}
			
			public function isValid():void {
				
				var validMessage:String = "";
				
				if ( Boolean(parentApplication.bLogin) == false ) validMessage = "<font color='#FF6464'>로그인</font> 후 이용 가능 합니다.";
				else if (cMessage.getMessage() == "" ) validMessage = "<font color='#FF6464'>메시지</font>를 입력 하세요.";
				else if (cMessage.bLimitMessage()) validMessage = "메시지가 <font color='#FF6464'>" +cMessage.getLimitMessageByte()+ "byte</font>를 초과 하였습니다.";
				else if (cPhone.getTotalCount() == 0) validMessage = "<font color='#FF6464'>전화번호</font>를 입력하세요.";
				else if (cReturnPhone.returnPhone.length == 0) validMessage = "<font color='#FF6464'>회신번호</font>를 입력하세요";
				else {
					validMessage = "<font color='#25E021'>전송하기</font> 버튼을 누르면 전송 됩니다.";
					sendButton.enabled = true;
				}
				
				cReadMe.setMessage( validMessage );
				
			}
			
			public function alert(s:String, mode:int=0):void {
				
				this.iAlert.text_label = s;
				this.iAlert.end();
				this.iAlertContainer.visible = true;
				this.iAlert.play_glow(); 
			}
			
			protected function message1_alertHandler(event:CustomEvent):void {
				
				trace(event.obj);
			}
			
			
			protected function validHandler(event:CustomEvent):void	{
				isValid();
			}
			
			
			/*###############################
			#	RemoteObject				#
			###############################*/
			private function remoteObjectInit():void {
				
				ro = new RemoteObject();
				ro.showBusyCursor = true;
				ro.destination = RO_DESTINATION;
				ro.addEventListener(FaultEvent.FAULT, remoteObjectFaultEventHandler); 
			}
			private function remoteObjectInit_sub():void {
				
				ro_sub = new RemoteObject();
				ro_sub.destination = RO_DESTINATION;
				ro_sub.addEventListener(FaultEvent.FAULT, remoteObjectFaultEventHandler); 
			}
			
			private function remoteObjectFaultEventHandler(event:FaultEvent):void{
				
				isValid();
				trace(event.fault);
				SLibrary.alert(event.fault.faultString);
			}
			
			protected function sendButton_clickHandler(event:MouseEvent):void
			{
				Button(event.currentTarget).enabled = false;
				remoteObjectInit();
				
				ro.addEventListener(ResultEvent.RESULT,send_ResultEventHandler);
				
				ro.sendSMS( cMessage.getMessage(),
					cPhone.phoneList,
					cReturnPhone.returnPhone ,
					cReservation.bReservation ? cReservation.strReservation +":00" : "" );
				
				//sending count
				if (sendingCount_intervalID)
					clearInterval(sendingCount_intervalID);
				remoteObjectInit_sub();
				ro_sub.addEventListener(ResultEvent.RESULT, getSendingCount_ResultEventHandler);
				sendingCount_intervalID = setInterval(getSendingCount,duration);
			}
			
			private function send_ResultEventHandler(e:ResultEvent):void {
				
				if (sendingCount_intervalID) clearInterval(sendingCount_intervalID);
				
				var bVO:BooleanAndDescriptionVO = e.result as BooleanAndDescriptionVO;
				if (bVO.bResult) {
					
					cPhone.init();
					
					isValid();
					
					var result:Array = String(bVO.strDescription).split(/\,/);
					var cnt:int = result.length;
					
				} else {
					
					isValid();
					SLibrary.alert(bVO.strDescription);
				}
				
			}
			
			
			/*###############################
			#	Sending Count				#
			###############################*/
			private var sendingCount_intervalID:uint;
			private var duration:Number = 500;
			private function getSendingCount():void {
				
				ro_sub.getState( parentApplication.login_id );
			}
			private function getSendingCount_ResultEventHandler(e:ResultEvent):void {
				
				alert( String(e.result) );
			}
			

			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				remoteObjectInit();
				
				ro.addEventListener(ResultEvent.RESULT,test_ResultEventHandler);
				
				ro.removeEventListener(ResultEvent.RESULT, test_ResultEventHandler);
				ro.addEventListener(ResultEvent.RESULT,test2_ResultEventHandler);
				ro.test( );
			}
			
			private function test_ResultEventHandler(e:ResultEvent):void {
				
				trace(11111);
				
			}
			
			private function test2_ResultEventHandler(e:ResultEvent):void {
				
				trace(22222);
				
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Group>
		<s:BitmapImage source="@Embed('/assets/hp11.png')" />
		<s:VGroup left="26" top="57" gap="4">
			<handphone:ReadMe id="cReadMe"/>
			<handphone:Message id="cMessage" alert="message1_alertHandler(event)" validValue="validHandler(event)"/>
			<handphone:Phone  id="cPhone" validValue="validHandler(event)"/>
			<handphone:ReturnPhone  id="cReturnPhone" validValue="validHandler(event)"/>
			<handphone:Reservation  id="cReservation"/>
			<s:HGroup gap="10">
				<s:Button id="sendButton" width="90" height="30" label="전송하기"
						  click="sendButton_clickHandler(event)"/>
				<s:Button id="cancelButton" width="90" height="30" label="취소하기"
						  click="cancelButton_clickHandler(event)"/>	
			</s:HGroup>
		</s:VGroup>
	</s:Group>	
	<!--전송중 카운트-->
	<s:VGroup id="iAlertContainer" x="22" y="60" width="165" depth="7" focusEnabled="false" visible="false" horizontalAlign="center">
		<s:Label text="전송요청!!" fontSize="14" color="0x000000" visible="false"/>
		<lib:AlertLabel id="iAlert" font_size="40" glow_color="0x000000" text_color="0xFFFFFF" text_label="" effectEnd="this.iAlertContainer.visible=false"/>
	</s:VGroup>
</mx:Module>
