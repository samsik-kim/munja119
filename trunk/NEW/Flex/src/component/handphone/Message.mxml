<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  creationComplete="vgroup1_creationCompleteHandler(event)">
	<fx:Metadata>
		[Event(name="alert", type="lib.CustomEvent")]
		[Event(name="validValue", type="lib.CustomEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import lib.BooleanAndDescriptionVO;
			import lib.CustomEvent;
			import lib.FileUploadByRemoteObject;
			import lib.FileUploadByRemoteObjectEvent;
			import lib.RO;
			import lib.SLibrary;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			public var mmsImage:String = "";
			
			private var _message:String;
			private var _maxByte:int = 90;
			private var _currentByte:int = 0;
			
			[Bindable]private var _enable:Boolean = true;
			
			private var fur:FileUploadByRemoteObject;
			
			private var byteDisplayHeight:int = 22;
			
			public function get currentByte():int {	return _currentByte; }
			public function set currentByte(value:int):void	{ _currentByte = value; this.IByteLabel.text = String( value );	}
			
			public function get maxByte():int { return _maxByte; }
			public function set maxByte(value:int):void	{ _maxByte = value; }
			
			
			public function cutLimitByte():String { return SLibrary.cutByteTo(this._message , this._maxByte ); }			
			
			/* style */
			public function get enable():Boolean { return _enable; }			
			public function set enable(value:Boolean):void { _enable = value; }
			
			
			/**
			 * MaxBytes를 세팅 해줍니다.
			 */
			public function setMaxByteFields(maxByteSetting:Number):void {	IByteLabel.text = String(maxByteSetting); }
			
			public function getMessage():String{ return IMessage.text; }
			
			public function setMessage(message:String):void{ 

				IMessage.text = message;
				
				IMessage_ByteCheck();
				if (bLimitMessage()) {
					if (maxByte <= 90) {
						confirm.visible = true;
					}else {
						cutBytes();
					}
					
				} else {
					dispatchEvent(new CustomEvent("validValue", null));
				}
			}
			
			public function setMessageAdd(message:String):void{
				
				IMessage.text += message;
				IMessage_ByteCheck();
				if (bLimitMessage()) {
					if (maxByte <= 90) {
						confirm.visible = true;
					}else {
						cutBytes();
					}
				} else {
					dispatchEvent(new CustomEvent("validValue", null));
				}
				
			}
			
			public function getLimitMessageByte():Number{ return _maxByte; } 
			
			/**
			 * 리미트 메시지 바이트를 세팅합니다.
			 */
			public function setLimitMessageByte(num:Number):void{
				
				_maxByte = num;
				setMaxByteFields(num);
			}
			
			/**
			 * 리미트 바이트를 넘었는지 여부에 대해 반환 합니다.
			 */
			public function bLimitMessage():Boolean { return this.currentByte < 0; }
			
			
			/**
			 * limitMessageByte로 message를 자른 후 반환
			 *
			 */
			public function cutLimitMessage():String{ return SLibrary.cutByteTo(IMessage.text, _maxByte); }
			
			public function IMessage_ByteCheck():void {
				
				this.currentByte = SLibrary.remainByte( SLibrary.getByte(this.getMessage()),this.maxByte);
			}
			
			public function IMessage_ByteCheckAddSelected(addByte:int):void {
				
				this.currentByte = SLibrary.remainByte( SLibrary.getByte(this.getMessage())+ addByte,this.maxByte);
			}
			
			public function setPhoto(source:String):void {
				
				removeImage();
				var img:Image = new Image();
				img.source = source;
				img.buttonMode = true;
				img.useHandCursor = true;
				mBox.addElementAt(img,0);
				
				mmsImage = source;
				
				changeMMS();
			}
			
			private function removeImage():void {
				if (mBox.numElements == 2) {
					mBox.removeElementAt(0);
				}
			}


			protected function IMessage_keyUpHandlerAuto(event:KeyboardEvent):void
			{
				IMessage_ByteCheck();
				
				if (mode.text == "LMS" && currentByte > 0 && currentByte >= 1910 ) {
					trace("maxByte:"+currentByte);
					maxByte = 90;
					changeSMS();
				}
				
				
				if (bLimitMessage()) {
					if (maxByte <= 90) {
						confirm.visible = true;
					}else {
						cutBytes();
					}
					
				} else {
					dispatchEvent(new CustomEvent("validValue", null));
				}
			}
			
			protected function IMessage_keyUpHandler(event:KeyboardEvent):void
			{
				IMessage_ByteCheck();
				
				if (bLimitMessage()) {
					cutBytes();
				} else {
					dispatchEvent(new CustomEvent("validValue", null));
				}
			}
			
			private function cutBytes():void {
				setMessage(cutLimitMessage());
				dispatchEvent(new CustomEvent("alert", String(this.maxByte)+" byte 이상 메시지가 삭제 되었습니다."));
			}
			

			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				this._currentByte = 0;
				// mms 이미지 업로드 초기화
				this.fur = new FileUploadByRemoteObject("WEB");
				this.fur.addEventListener(FileUploadByRemoteObjectEvent.COMPLETE, FileUploadByRemoteObjectCOMPLETEHandler);
				this.fur.addEventListener(FileUploadByRemoteObjectEvent.RESULT, FileUploadByRemoteObjectRESULTHandler);
				this.fur.addEventListener(FileUploadByRemoteObjectEvent.FAULT, FileUploadByRemoteObjectFAULTHandler);
			}

			protected function clickHandler(event:Event):void
			{
				if (parentApplication.bLogin == true)
					parentApplication.loadEmoticon();
				else 
					ExternalInterface.call("alert","로그인 후 이용 가능 합니다.");
			}
			
			protected function clickHandlerSpc():void
			{
				parentDocument.spcBox.visible=true;
			}
			
			private var ro:RO = new RO();
			private var RO_DESTINATION:String = "WEB";
			
			protected function clickHandlerSave():void
			{
				if (parentApplication.bLogin == true){
					ro.set(RO_DESTINATION, save_ResultEventHandler);
					ro.method.addMymsg(IMessage.text);
				}
				else 
					ExternalInterface.call("alert","로그인 후 이용 가능 합니다.");
				
			}
			
			private function save_ResultEventHandler(event:ResultEvent):void {
				
				var bvo:BooleanAndDescriptionVO = event.result as BooleanAndDescriptionVO;
				
				if (bvo.bResult == true) {
					ExternalInterface.call("alert","저장되었습니다.");
					parentApplication.refreshMy();
				}else {
					ExternalInterface.call("alert","저장실패 : "+ bvo.strDescription);
				}
			}
			
			public function changeLMS():void {
				maxByte = 2000;
				mode.text = "LMS";
				confirm.visible = false;
				IMessage_keyUpHandler(null);
			}
			
			public function changeMMS():void {
				maxByte = 2000;
				mode.text = "MMS";
				confirm.visible = false;
				IMessage_keyUpHandler(null);
			}
			
			public function changeSMS():void {
				maxByte = 90;
				mode.text = "SMS";
				IMessage_keyUpHandler(null);
			}
			
			// mms 이미지 업로드 이벤트 핸들러
			private function FileUploadByRemoteObjectCOMPLETEHandler(e:FileUploadByRemoteObjectEvent):void {
				
				if ( Number(this.fur.UploadFiles[0].realsize) > Number(1024*1024*1) ) {
					this.fur.UploadFiles.pop();
					SLibrary.alert("1MB 이상의 파일은 사용 하실 수 없습니다.");
				}else {
					this.fur.remoteObject.setMMSUpload( e.data, e.fileName );
				}
			}
			
			private function FileUploadByRemoteObjectRESULTHandler(e:FileUploadByRemoteObjectEvent):void {
				
				var bvo:BooleanAndDescriptionVO = e.result as BooleanAndDescriptionVO;
				
				if (bvo.bResult) this.setPhoto(bvo.strDescription as String);
				else SLibrary.alert(bvo.strDescription);
				
			}
			private function FileUploadByRemoteObjectFAULTHandler(e:FileUploadByRemoteObjectEvent):void { SLibrary.alert(e.fault.toString()); }
			

			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" horizontalAlign="center" gap="2">
		<s:Scroller width="200" height="120">
			<s:VGroup id="mBox" width="100%" height="120">
				<s:Group width="100%" height="115">
					<s:Label id="mode" fontSize="40" text="SMS" fontWeight="bold" alpha="0.2" verticalCenter="0" horizontalCenter="0"/>
					<s:TextArea id="IMessage" skinClass="skin.TextAreaSkinBG" width="200" height="120" fontFamily="굴림체" fontSize="16" verticalScrollPolicy="off" enabled="{_enable}" color="0x000000" keyUp="IMessage_keyUpHandler(event)"></s:TextArea>
				</s:Group>
			</s:VGroup>
		</s:Scroller>
		
		
		<s:Group width="100%">
			<s:Image source="images/main_40.png" left="0" buttonMode="true" useHandCursor="true" click="clickHandler(event)" verticalCenter="0" />
			
			<s:Image source="images/main_42.png" left="55" buttonMode="true" useHandCursor="true" click="clickHandlerSpc()" verticalCenter="0" />
			
			<s:Label id="IByteLabel" right="30" fontSize="14" fontWeight="bold" text="90" textAlign="right" color="0x000000" verticalCenter="3"/>
			<s:Label right="0" fontSize="14" text="byte" width="30" textAlign="right" color="0x000000" verticalCenter="3"/>
		</s:Group>
		<s:Group width="100%" height="25">
			<s:Image source="images/btn_photo.gif" click="this.fur.addFiles()" left="0" verticalCenter="0" buttonMode="true" useHandCursor="true"/>
			<s:Button label="이름넣기" width="55" height="16" verticalCenter="0" left="47" fontSize="11" click="setMessageAdd('{이름}')" />
			<!--<s:Image source="images/btn_preview.gif" left="110" buttonMode="true" useHandCursor="true"/>-->
			<s:Image source="images/btn_again.gif" click="setMessage('');removeImage();" left="105" verticalCenter="0" buttonMode="true" useHandCursor="true"/>
			<s:Image source="images/main_47.png" right="0" buttonMode="true" useHandCursor="true" click="clickHandlerSave()" verticalCenter="0"/>
		</s:Group>
	</s:VGroup>
	
	<s:Panel id="confirm" visible="false" height="100" top="4" left="4" right="4" title="전송선택">
		<s:layout>
			<s:VerticalLayout verticalAlign="middle" horizontalAlign="center"/>
		</s:layout>
		<s:Label text="LMS로 전환 하시겠습니까?" />
		<s:Label text="전화번호당 3건 차감" />
		<s:HGroup>
			<s:Button label="전환" click="changeLMS()" />
			<s:Button label="취소" click="cutBytes();confirm.visible=false;" />
		</s:HGroup>
	</s:Panel>
	
</s:Group>
