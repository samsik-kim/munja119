<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  width="100%" minHeight="600" currentState="thema" xmlns:lib="lib.*">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		*
		{
			font-family: Dotum;
			color:#000000;
		}
	</fx:Style>
	<fx:Metadata>
		[Event(name="clickMessage", type="lib.CustomEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import lib.BooleanAndDescriptionVO;
			import lib.CustomEvent;
			import lib.FileUploadByRemoteObject;
			import lib.FileUploadByRemoteObjectEvent;
			import lib.RO;
			import lib.SLibrary;
			
			import mx.collections.ArrayCollection;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var ro:RO = new RO();
			private var RO_DESTINATION:String = "WEB";
			[Bindable]private var gubun:String = "테마문자";
			private var cate:String = "";
			
			private var currTotalCount:int = 0;
			
			private var al:ArrayCollection =  new ArrayCollection();
			private var ac:ArrayCollection = new ArrayCollection();
			private var acSub:ArrayCollection = new ArrayCollection();
			[Binable] public var bMy:Boolean = false;
			
			// 이미지 업로드 관련
			private var fur:FileUploadByRemoteObject;
			
			public function cateList_creationCompleteHandler():void {
				
				emotiList.dataProvider = al;
				//new
				cateList.dataProvider = ac;
				subCateList.dataProvider = acSub;
				cbCate.dataProvider = ac;
				// 저장문자시 카테고리 안가져옴
				if (gubun == "my") {
					getEmotiList();
				}
				else {
					ro.set(RO_DESTINATION, cateList_ResultEventHandler);
					ro.method.getEmotiCateListMMS(gubun);
				}
				
				// mms 이미지 업로드 초기화
				this.fur = new FileUploadByRemoteObject("WEB");
				this.fur.addEventListener(FileUploadByRemoteObjectEvent.COMPLETE, FileUploadByRemoteObjectCOMPLETEHandler);
				this.fur.addEventListener(FileUploadByRemoteObjectEvent.RESULT, FileUploadByRemoteObjectRESULTHandler);
				this.fur.addEventListener(FileUploadByRemoteObjectEvent.FAULT, FileUploadByRemoteObjectFAULTHandler);
			}
			
			private function cateList_ResultEventHandler(event:ResultEvent):void {
				
				var arr:Array = event.result as Array;
				//new
				ac.removeAll();
				ac.addAll(new ArrayCollection(arr));
				cbCate.textInput.text = "";
				//cateList.dataProvider = ac;
				getEmotiList()
			}
			
			protected function getEmotiList():void {
				
				ro.set(RO_DESTINATION, emoti_ResultEventHandler);
				ro.method.getEmotiCatePageMMS(gubun, cate, 0, paging.viewDataCount);
			}
			protected function getMyList():void {
				
				ro.set(RO_DESTINATION, emoti_ResultEventHandler);
				ro.method.getEmotiCatePage(gubun, cate, 0, paging.viewDataCount);
			}
			protected function emoti_ResultEventHandler(event:ResultEvent):void {
				
				al = event.result as ArrayCollection;
				
				
				if (al != null && al.length > 0) {
					paging.totalDataCount = Object(al.getItemAt(0)).cnt;
					
					if (currTotalCount != paging.totalDataCount)paging.init();
					currTotalCount = paging.totalDataCount;
				}
				
				emotiList.dataProvider = al;
				
			}
			
			
			protected function paging_clickPageHandler(event:CustomEvent):void {

				ro.method.getEmotiCatePageMMS(gubun, cate, event.obj, paging.viewDataCount);
			}
			
			// 종류변경
			protected function emti_changeHandler(idx:Number):void {
				
				if (idx == 0) { gubun = "업종별문자"; currentState = "upjong";cate=""; }
				else if (idx == 1) { gubun = "테마문자"; currentState = "thema";cate=""; }
				else if (idx == 2) { gubun = "my"; currentState = "save";cate=""; }
				
				cateList_creationCompleteHandler()
				
			}
			
			public function deleteSave(idx:int):void {
				ro.set(RO_DESTINATION, delete_ResultEventHandler);
				ro.method.delMymsg(idx);
			}
			
			private function delete_ResultEventHandler(event:ResultEvent):void {
				
				var b:BooleanAndDescriptionVO = event.result as BooleanAndDescriptionVO;
				
				if (b.bResult == true) {
					ExternalInterface.call("alert","삭제 되었습니다.");
					cateList_creationCompleteHandler();
				}
			}
			
			
			protected function add_clickHandler(event:MouseEvent):void
			{
				ro.set(RO_DESTINATION, add_ResultEventHandler);
				var obj:Object = cbCate.selectedItem;
				if (obj == null){
					ExternalInterface.call("alert", "카테고리를 입력 또는 선택 하세요.");
				}else 
					ro.method.addEmotiCateMMS(gubun, cbCate.selectedItem, title.text, inputEmt.source);
			}
			
			private function add_ResultEventHandler(event:ResultEvent):void {
				
				SLibrary.alert("저장되었습니다." );
				inputEmt.source = "";
				cateList_creationCompleteHandler();
			}
			
			protected function cateList_changeHandler(event:IndexChangeEvent):void
			{
				this.cate = cateList.selectedItem as String;
				viewSubCate(cateList.selectedIndex);
				getEmotiList();
			}
			
			
			// mms 이미지 업로드 이벤트 핸들러
			private function FileUploadByRemoteObjectCOMPLETEHandler(e:FileUploadByRemoteObjectEvent):void {
				
				if ( Number(this.fur.UploadFiles[0].realsize) > Number(1024*1024*1) ) {
					this.fur.UploadFiles.pop();
					SLibrary.alert("1MB 이상의 파일은 사용 하실 수 없습니다.");
				}else {
					this.fur.remoteObject.setMMSUpload( e.data, e.fileName );
				}
			}
			
			private function FileUploadByRemoteObjectRESULTHandler(e:FileUploadByRemoteObjectEvent):void {
				
				var bvo:BooleanAndDescriptionVO = e.result as BooleanAndDescriptionVO;
				
				if (bvo.bResult) inputEmt.source = bvo.strDescription as String;
				else SLibrary.alert(bvo.strDescription);
				
			}
			private function FileUploadByRemoteObjectFAULTHandler(e:FileUploadByRemoteObjectEvent):void { SLibrary.alert(e.fault.toString()); }
			
			private function viewSubCate(idx:int):void {
				
				var cnt:int = ac.length;
				var arr:Array = null;
				var tmp:ArrayCollection = new ArrayCollection();
				
				for (var i:int = idx+1; i < cnt; i++) {
					
					arr = (ac.getItemAt(i) as String).split("_");
					if (arr.length <= 1) break;
					else {
						tmp.addItem(ac.getItemAt(i) as String);
					}
				}
				acSub.removeAll();
				acSub.addAll(tmp);
			}
			
			//new
			protected function subCateList_changeHandler(event:IndexChangeEvent):void
			{
				this.cate = subCateList.selectedItem as String;
				//viewSubCate(cateList.selectedIndex);
				getEmotiList();
			}
			
			protected function move_clickHandler(event:MouseEvent):void
			{
				ro.set(RO_DESTINATION, add_ResultEventHandler);
				var obj:Object = cbCate.selectedItem;
				var sel:Vector.<Object> = emotiList.selectedItems;
				var cnt:int = sel.length;
				var arr:Array = new Array;
				for (var i:int = 0; i < cnt; i++) {
					arr.push( sel[i].idx );
				}
				
				var rslt:String = arr.join(",");
				
				if (obj == null){
					ExternalInterface.call("alert", "카테고리를 입력 또는 선택 하세요.");
				}else 
					ro.method.moveEmotiCateMMS(cbCate.selectedItem, rslt);
			}
			
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="upjong"/>
		<s:State name="thema"/>
		<s:State name="save"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup width="100%" height="100%" gap="20">
		<s:VGroup width="200">
			<s:Group width="142" height="200" >
				<s:Image id="inputEmt" />
			</s:Group>
			<s:Label text="권장 사이즈 : 176 * 144" />
			<s:Button label="업로드" width="100%"  click="this.fur.addFiles()"/>	
			<s:Label text="{gubun}"/>
			<s:TextInput id="title" prompt="제목" />
			<s:ComboBox id="cbCate" width="100%" prompt="카테고리입력 또는 선택"/>
			<s:HGroup width="100%">
				<s:Button label="추가" click="add_clickHandler(event)"/>
				<s:Button label="선택이동" click="move_clickHandler(event)"/>
			</s:HGroup>
		</s:VGroup>
		
		<s:Group top="20" width="100%">
			
			<s:Group top="37" height="700">
				<s:Rect left="0" right="0" top="0" bottom="0" ><s:stroke><s:SolidColorStroke color="0xDCB8AC" weight="2" /></s:stroke></s:Rect>
				
				<s:VGroup top="11" left="0" right="0" horizontalAlign="center" paddingLeft="10" paddingRight="10">
					<s:Group id="cateBox" visible.save="false" width="90%" height="86" >
						
						<s:Rect left="0" right="0" top="0" bottom="0" ><s:fill><s:SolidColor color="0xEEE3DD"/></s:fill></s:Rect>
						<s:List id="cateList" change="cateList_changeHandler(event)" left="10" selectionColor="0xffffff" rollOverColor="0xEEE3DD" right="10" height="66" verticalCenter="0" skinClass="skin.ListBg"
								itemRenderer="admin.CateListItemRenderer"
								creationComplete="cateList_creationCompleteHandler()">
							<s:layout><lib:FlowLayout horizontalGap="10" /></s:layout>
						</s:List>
						
					</s:Group>
					
					<s:List id="subCateList" width="600" change="subCateList_changeHandler(event)"
							itemRenderer="admin.SubCateListItemRenderer"
							borderVisible="false"
							selectionColor="0xEEE3DD" >
						<s:layout><s:TileLayout/></s:layout>
					</s:List>
					
					<s:List id="emotiList" width="100%" height="540" 
							allowMultipleSelection="true" skinClass="skin.ListBg" itemRenderer="skin.EmoticonMMSRenderer">
						<s:layout><s:TileLayout requestedColumnCount="4" horizontalAlign="center"/></s:layout>
					</s:List>
					<lib:Paging id="paging" height="30" clickPage="paging_clickPageHandler(event)" />
				</s:VGroup>
			</s:Group>
			
			<s:HGroup gap="0">
				<s:Image source="/new/images/center_m01.gif" source.thema="/new/images/center_m01_.gif" click="emti_changeHandler(1)" useHandCursor="true" />
				<s:Image source="/new/images/center_m02.gif" source.upjong="/new/images/center_m02_.gif" click="emti_changeHandler(0)" useHandCursor="true" />
			</s:HGroup>
		</s:Group>
		
	</s:HGroup>
</s:Module>
