<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  >
	<fx:Metadata>
		[Event(name="alert", type="lib.CustomEvent")]
		[Event(name="validValue", type="lib.CustomEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import lib.BooleanAndDescriptionVO;
			import lib.CustomEvent;
			import lib.FileUploadByRemoteObject;
			import lib.FileUploadByRemoteObjectEvent;
			import lib.RO;
			import lib.SLibrary;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			public var arrImage:Array = new Array;
			public function get mmsImage():String {
				
				
				return arrImage.join(";"); 
			}
			public function allDelPhoto():void {
				arrImage = new Array;
				if (mBox.numElements > 1) {
					var cnt:int = mBox.numElements;
					for (var i:int = 0; i < cnt-1; i++ )
						mBox.removeElementAt(0);
				}
			}
			
			private var _message:String;
			private var _maxByte:int = 150;
			private var _currentByte:int = 0;
			
			[Bindable]private var _enable:Boolean = true;
			
			private var fur:FileUploadByRemoteObject;
			
			private var byteDisplayHeight:int = 22;
			
			public var bLMSAuto:Boolean = false; // 입력한 값에 대해 자동전환 
			
			public function get currentByte():int {	return _currentByte; }
			public function set currentByte(value:int):void	{ _currentByte = value; this.IByteLabel.text = String( value );	}
			
			public function get maxByte():int { return _maxByte; }
			public function set maxByte(value:int):void	{ _maxByte = value; }
			
			
			public function cutLimitByte():String { return SLibrary.cutByteTo(this._message , this._maxByte ); }			
			
			/* style */
			public function get enable():Boolean { return _enable; }			
			public function set enable(value:Boolean):void { _enable = value; }
			
			
			/**
			 * MaxBytes를 세팅 해줍니다.
			 */
			public function setMaxByteFields(maxByteSetting:Number):void {	IByteLabel.text = String(maxByteSetting); }
			
			public function getMessage():String{ return IMessage.text; }
			
			public function setMessage(message:String):void{ 

				IMessage.text = message;
				
				IMessage_ByteCheck();
				if (bLimitMessage()) {
					
					cutBytes();
					
				} else {
					dispatchEvent(new CustomEvent("validValue", null));
				}
				if (IMessage.text != "") {
					ExternalInterface.call("alert", "해외문자는 특수문자, 줄바꿈은 발송되지 않습니다.");
				}
			}
			
			public function setMessageAdd(message:String):void{
				
				IMessage.text += message;
				IMessage_ByteCheck();
				if (bLimitMessage()) {
					
					cutBytes();
					
				} else {
					dispatchEvent(new CustomEvent("validValue", null));
				}
				
			}
			
			public function getLimitMessageByte():Number{ return _maxByte; } 
			
			/**
			 * 리미트 메시지 바이트를 세팅합니다.
			 */
			public function setLimitMessageByte(num:Number):void{
				
				_maxByte = num;
				setMaxByteFields(num);
			}
			
			/**
			 * 리미트 바이트를 넘었는지 여부에 대해 반환 합니다.
			 */
			public function bLimitMessage():Boolean { return this.currentByte < 0; }
			
			
			/**
			 * limitMessageByte로 message를 자른 후 반환
			 *
			 */
			public function cutLimitMessage():String{ return SLibrary.cutByteTo(IMessage.text, _maxByte); }
			
			public function IMessage_ByteCheck():void {
				
				this.currentByte = SLibrary.remainByte( SLibrary.getByte(this.getMessage()),this.maxByte);
			}
			
			public function IMessage_ByteCheckAddSelected(addByte:int):void {
				
				this.currentByte = SLibrary.remainByte( SLibrary.getByte(this.getMessage())+ addByte,this.maxByte);
			}
			
			
			private function removeImage():void {
				
				if (arrImage.length > 2) {
					arrImage.pop();
					ExternalInterface.call("alert","3개까지만 추가 됩니다. 마지막 이미지가 지워졌습니다.");
					trace(arrImage.join(";"));
				}
				
				if (mBox.numElements == 4) {
					mBox.removeElementAt(0);
				}
			}


			protected function IMessage_keyUpHandlerAuto(event:KeyboardEvent):void
			{
				IMessage_ByteCheck();
				
				if (bLMSAuto == true && mode.text == "LMS" && currentByte > 0 && currentByte >= 1910 ) {
					trace("maxByte:"+currentByte);
					maxByte = 150;
					changeSMS();
				}
				
				
				if (bLimitMessage()) {
					
						cutBytes();
					
					
				} else {
					dispatchEvent(new CustomEvent("validValue", null));
				}
			}
			
			protected function IMessage_keyUpHandler(event:KeyboardEvent):void
			{
				IMessage_ByteCheck();
				
				if (bLimitMessage()) {
					
						cutBytes();
				} else {
					dispatchEvent(new CustomEvent("validValue", null));
				}
			}
			
			private function cutBytes():void {
				setMessage(cutLimitMessage());
				dispatchEvent(new CustomEvent("alert", String(this.maxByte)+" byte 이상 메시지가 삭제 되었습니다."));
			}
			

			

			protected function clickHandler(event:Event):void
			{
				if (parentApplication.bLogin == true)
					parentApplication.subLoad("emoticon");
				else 
					ExternalInterface.call("alert","로그인 후 이용 가능 합니다.");
			}
			
			
			private var ro:RO = new RO();
			private var RO_DESTINATION:String = "WEB";
			
			protected function clickHandlerSave():void
			{
				if (parentApplication.bLogin == true){
					if (IMessage.text == "")ExternalInterface.call("alert","메시지를 입력하세요.");
					else {
						ro.set(RO_DESTINATION, save_ResultEventHandler);
						ro.method.addMymsg(IMessage.text);	
					}
					
				}
				else 
					ExternalInterface.call("alert","로그인 후 이용 가능 합니다.");
				
			}
			
			private function save_ResultEventHandler(event:ResultEvent):void {
				
				var bvo:BooleanAndDescriptionVO = event.result as BooleanAndDescriptionVO;
				
				if (bvo.bResult == true) {
					ExternalInterface.call("alert","저장되었습니다.");
					//parentApplication.refreshMy();
				}else {
					ExternalInterface.call("alert","저장실패 : "+ bvo.strDescription);
				}
			}
			
			
			public function changeSMS():void {
				maxByte = 150;
				mode.text = "해외문자";
				IMessage_keyUpHandler(null);
			}
			
			// mms 이미지 업로드 이벤트 핸들러
			private function FileUploadByRemoteObjectCOMPLETEHandler(e:FileUploadByRemoteObjectEvent):void {
				
				if ( Number(this.fur.UploadFiles[this.fur.UploadFiles.length -1].realsize) > Number(1024*1024*1) ) {
					this.fur.UploadFiles.pop();
					SLibrary.alert("1MB 이상의 파일은 사용 하실 수 없습니다.");
				}else {
					this.fur.remoteObject.setMMSUpload( e.data, e.fileName );
				}
			}
			
		

						
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Animate id="a" 
				   duration="550" 
				   target="{msgGroup}"  
				   repeatCount="1">
			<s:SimpleMotionPath id="asmp" valueFrom="154"
								valueTo="257"
								property="height" />
		</s:Animate>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" horizontalAlign="center" gap="0">
		<s:Group id="msgGroup" width="100%" height="154">
			<s:Image source="@Embed(source='images/messageBg.png')" width="100%" height="100%" fillMode="clip" />
			<s:VGroup top="10" width="200" height="100%" horizontalCenter="0" horizontalAlign="center" gap="2">
				<s:Scroller width="200" height="100%">
					<s:VGroup id="mBox" width="100%" height="100%">
						<s:Group width="100%" height="100%">
							<s:Label id="mode" fontSize="40" text="해외문자" fontWeight="bold" alpha="0.2" verticalCenter="0" horizontalCenter="0"/>
							<s:TextArea id="IMessage" skinClass="skin.TextAreaSkinBG" width="200" height="100%" fontFamily="굴림체" fontSize="16" verticalScrollPolicy="off" enabled="{_enable}" color="0x000000" 
										keyUp="IMessage_keyUpHandler(event)"
										></s:TextArea>
						</s:Group>
					</s:VGroup>
				</s:Scroller>
				
				
				<s:Group width="100%" height="32">
					<s:Label id="IByteLabel" right="30" fontSize="14" fontWeight="bold" text="150" textAlign="right" color="0x000000" verticalCenter="3"/>
					<s:Label right="0" fontSize="14" text="byte" width="30" textAlign="right" color="0x000000" verticalCenter="3"/>
				</s:Group>
			</s:VGroup>
		</s:Group>
		<s:Group width="100%" height="23">
			<s:Image source="@Embed('images/re.jpg')" click="setMessage('');allDelPhoto();" left="0" verticalCenter="0" buttonMode="true" useHandCursor="true"/>
			<s:Image source="@Embed('images/saveNew.jpg')" left="65" buttonMode="true" useHandCursor="true" click="clickHandlerSave()" verticalCenter="0"/>
			<s:Image source="@Embed('images/sentf.jpg')" right="0" verticalCenter="0" buttonMode="true" useHandCursor="true" click="parentApplication.subLoad('sent')"/>
		</s:Group>
	</s:VGroup>
	
</s:Group>
